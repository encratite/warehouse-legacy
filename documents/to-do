To do:

proper unit testing for all the changes in:
	-the notification server itself (write a new client?)
	-user API downloading/queueing/notifications
	-ReleaseHandler matches/queueing/notifications
	-cleaner queue/notification handling
	-categoriser queue entries/notifications

the creation of new users should add them to the database in the first place (currently only the shell does it)
add proper handling of torrents which consist of single files instead of folders (this breaks the cleaner and the categoriser I think)
possible future issue: store NFOs with newlines instead of raping them (solved in the case of TL)
move the type specifications from configuration/ to site/

Work in progress:

solve the on-download notification problem

Problematic:

symlinks should get updated when you add/remove a filter? - frequently you do not actually want this because you're just removing an old series or whatever

Done:

notificationClient updates missing in the user API (download/cancel), in the ReleaseHandler and also in the Categoriser
add a seed check for downloads (well, the cleaner simply removes unseeded stuff after a while now and notifies the user(s) in question)
The JSON RPC server is one central process, unlike the shell, so the files it creates will have the wrong user (this will result in missing 'own' symlinks when using the download API)
need status stuff, XMLRPC data from rtorrent
add genre filters for TorrentVault
fix the dates in the TV database
add tcng/tcc QoS stuff - requires a proper kernel
the cleaner should remove symlinks, too
integrate further sites (TorrentVault, oh well)
add NFO filtering
add symlinks for NFO hits in the categoriser
the categoriser should check what user issued a download, creating a symlink in "manual" and "own" or whatever
implement filter categories with symbolic links
HTTP URL should be retrieved from details, not from the DB
script which cleans up the disk on a regular basis (might not be working though)

Thrown out:

add more customisation features to the search results in the shell (irrelevant now that the shell is marginalised by the JSON RPC/notification-RPC protocol
